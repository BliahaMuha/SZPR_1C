
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЗаказПоставщику") Тогда
		
		ЗаказПоставщику = Параметры.ЗаказПоставщику;
		Организация = ЗаказПоставщику.Организация;
		ЗаказПокупателя = ЗаказПоставщику.ЗаказПокупателя;
		СтруктурнаяЕдиницаРезерв = ЗаказПоставщику.СтруктурнаяЕдиницаРезерв;
		
		ЗаполнитьНаСервере();
		
	Иначе
		Отказ = Истина;	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,"Ссылка",СформированныеДокументы,ВидСравненияКомпоновкиДанных.ВСписке);
	Элементы.СтраницаСформированныеДокументы.Видимость = СформированныеДокументы.Количество();	
	Элементы.ГруппаСтраницы.ОтображениеСтраниц =  ?(СформированныеДокументы.Количество(),ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуЗапасы.Ссылка КАК Ссылка,
		|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
		|	СУММА(ЗаказПоставщикуЗапасы.Количество) КАК Количество,
		|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ЗаказПоставщикуЗапасы.Цена) КАК Цена,
		|	СУММА(ЗаказПоставщикуЗапасы.Сумма) КАК Сумма,
		|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ЗаказПоставщикуЗапасы.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
		|ГДЕ
		|	ЗаказПоставщикуЗапасы.Ссылка = &ЗаказПоставщика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуЗапасы.Ссылка,
		|	ЗаказПоставщикуЗапасы.Номенклатура,
		|	ЗаказПоставщикуЗапасы.Характеристика,
		|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения,
		|	ЗаказПоставщикуЗапасы.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|	СУММА(ПриходнаяНакладнаяЗапасы.Количество) КАК Количество
		|ПОМЕСТИТЬ втНоменклатураПоступившая
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование = &ЗаказПоставщика
		|	И (ПриходнаяНакладнаяЗапасы.Номенклатура, ПриходнаяНакладнаяЗапасы.Характеристика) В
		|			(ВЫБРАТЬ
		|				втНоменклатура.Номенклатура КАК Номенклатура,
		|				втНоменклатура.Характеристика КАК Характеристика
		|			ИЗ
		|				втНоменклатура КАК втНоменклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура КАК Номенклатура,
		|	втНоменклатура.Характеристика КАК Характеристика,
		|	втНоменклатура.Количество КАК Количество,
		|	втНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	втНоменклатура.Цена КАК Цена,
		|	втНоменклатура.Сумма КАК Сумма,
		|	втНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	втНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ЕСТЬNULL(втНоменклатураПоступившая.Количество, 0) КАК КоличествоПоступило,
		|	втНоменклатура.Количество КАК КоличествоОстаток
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоступившая КАК втНоменклатураПоступившая
		|		ПО втНоменклатура.Номенклатура = втНоменклатураПоступившая.Номенклатура
		|			И втНоменклатура.Характеристика = втНоменклатураПоступившая.Характеристика";
	
	Запрос.УстановитьПараметр("ЗаказПоставщика", ЗаказПоставщику);
	
	Запасы.Загрузить(Запрос.Выполнить().Выгрузить());	

КонецПроцедуры

&НаСервере
Процедура ОчиститьЗаполненныеДанные()

	Запасы.Очистить();
	ЗапасыНовогоЗаказа.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаВыбратьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ЗАпасы Цикл
		СтрокаТЧ.Отбор = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ЗАпасы Цикл
		СтрокаТЧ.Отбор = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоКПереносуПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МаксимальноКПереносу = ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоступило;
	Если ТекущаяСтрока.КоличествоКПереносу > МаксимальноКПереносу Тогда
		ТекущаяСтрока.КоличествоКПереносу = МаксимальноКПереносу;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Количество к переносу не может превышать количество в заказе за вычетом уже поставленного! Заполнено максимальное количество";
		Сообщение.Сообщить();		
	КонецЕсли;
	ТекущаяСтрока.КоличествоОстаток = ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоКПереносу;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьЗаказы(Команда)
	
	Если ЗапасыНовогоЗаказа.Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала нужно перенести товары. Ни один товар для нового заказа не заполнен.";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	РазделитьЗаказыНаСервере();
	
	ОчиститьЗаполненныеДанные();
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РазделитьЗаказыНаСервере()
	
	Отказ = Ложь;
	
	УменьшитьСтарыйЗаказ(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПоступленияЗаказа = ДатаПоступления;
	Если ДатаПоступленияЗаказа = Дата(1,1,1) Тогда
		ДатаПоступленияЗаказа = ЗаказПоставщику.ДатаПоступления;	
	КонецЕсли;
	
	ПланПотребностейВМатериалах = ЗаказПоставщику.СЗПР_ПланПотребностейВМатериалах;
	ЗаказПокупателя = ЗаказПоставщику.ЗаказПокупателя;
	
	СоздатьНовыйЗаказПоставщику(ДатаПоступленияЗаказа, ПланПотребностейВМатериалах, ЗаказПокупателя, Отказ);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Обработка завершена.";
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Процедура УменьшитьСтарыйЗаказ(Отказ)

	ЗаказОбъект = ЗаказПоставщику.ПолучитьОбъект();
	
	Для каждого текСтрокаЗаказа Из ЗаказОбъект.Запасы Цикл
	
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", текСтрокаЗаказа.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", текСтрокаЗаказа.Характеристика);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", текСтрокаЗаказа.ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("Количество", текСтрокаЗаказа.Количество); 
		
		НайденныеСтроки = Запасы.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		Иначе
			НайденнаяСтрока = Неопределено;	
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		текСтрокаЗаказа.Количество = НайденнаяСтрока.КоличествоОстаток;
		
		Если текСтрокаЗаказа.Количество = 0 Тогда
			ИндексСтроки = ЗаказОбъект.Запасы.Индекс(текСтрокаЗаказа);
			ЗаказОбъект.Запасы.Удалить(ИндексСтроки);
		Иначе
			ПараметрыРасчета = ЗаполнитьПараметрыРасчета();	
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(текСтрокаЗаказа, ПараметрыРасчета);	
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не удалось уменьшить заказ поставщику %1, ошибка: %2. Обратитесь к администратору.", ЗаказПоставщику, ОписаниеОшибки());
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйЗаказПоставщику(ДатаПоступления, ПланПотребностейВМатериалах, ЗаказПокупателя, Отказ)

	НовыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Организация = Организация;
	НовыйДокумент.Контрагент = Контрагент;
	НовыйДокумент.Договор = ДоговорКонтрагента;
	НовыйДокумент.Заполнить(Неопределено);
	НовыйДокумент.СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаРезерв;
	НовыйДокумент.ЗаказПокупателя = ЗаказПокупателя;
	НовыйДокумент.ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти; 
	НовыйДокумент.ДатаПоступления = ДатаПоступления;
	НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
	НовыйДокумент.СЗПР_ПланПотребностейВМатериалах = ПланПотребностейВМатериалах;
	НовыйДокумент.Автор = Пользователи.ТекущийПользователь();
	// yala_N
	НовыйДокумент.Ответственный = ЗаказПоставщику.Ответственный;
	НовыйДокумент.СостояниеЗаказа = ЗаказПоставщику.СостояниеЗаказа;
	// yala_K
	

	Для каждого СтрокаЗапасов Из ЗапасыНовогоЗаказа Цикл
	
		НоваяСтрока = НовыйДокумент.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
		Если НовыйДокумент.НалогообложениеНДС =  Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ТекущаяДатаСеанса());	
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");	
		КонецЕсли;
		НоваяСтрока.ДатаПоступления = ДатаПоступления;
		
		ПараметрыРасчета = Новый Структура();
		ПараметрыРасчета.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, ПараметрыРасчета);
	
	КонецЦикла;

	// yala_N
	НовыйДокумент.Комментарий = НовыйДокумент.Комментарий + " [Отделен от заказа № " + ЗаказПоставщику.Номер + "]";
	// yala_K
	
	Попытка
	
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		НовСтр = СформированныеДокументы.Добавить(НовыйДокумент.Ссылка);
		
		Список.Отбор.Элементы.Очистить(); 
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,"Ссылка", СформированныеДокументы, ВидСравненияКомпоновкиДанных.ВСписке); 
		
		Элементы.СтраницаСформированныеДокументы.Видимость = СформированныеДокументы.Количество(); 
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ?(СформированныеДокументы.Количество(), ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не удалось создать новый заказ поставщику, ошибка: %2. Обратитесь к администратору.", ОписаниеОшибки());
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;		
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ЗапасыНовогоЗаказа.Очистить();
	Для каждого текСтрокаЗапаса Из Запасы Цикл
		
		Если текСтрокаЗапаса.Отбор Тогда
			НоваяСтрока = ЗапасыНовогоЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрокаЗапаса,, "Количество, Сумма, СуммаНДС");
			НоваяСтрока.Количество = текСтрокаЗапаса.КоличествоКПереносу;
			
			ПараметрыРасчета = ЗаполнитьПараметрыРасчета();
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, ПараметрыРасчета);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыРасчета()

	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", ЗаказПоставщику.СуммаВключаетНДС);
	
	Возврат ПараметрыРасчета; 

КонецФункции

&НаКлиенте
Процедура ЗапасыНовогоЗаказаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗапасыНовогоЗаказа.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ЗаполнитьПараметрыРасчета();
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(ТекущаяСтрока, ПараметрыРасчета);
	
КонецПроцедуры


