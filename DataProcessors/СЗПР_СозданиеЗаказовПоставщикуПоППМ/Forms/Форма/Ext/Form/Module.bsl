
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура КомандаЗаполнитьМатериалы(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Организация = ПланПотребностейВМатериалах.Организация;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументППМ", ПланПотребностейВМатериалах);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Номенклатура КАК Номенклатура,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Характеристика КАК Характеристика,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(УНСФ_ПланПотребностейВМатериалахПотребности.Количество) КАК Количество,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Склад КАК Склад,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Период КАК ДатаПоступления,
	// yala_N
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Работа КАК Работа
	// yala_K
	|ПОМЕСТИТЬ ВрТаб
	|ИЗ
	|	Документ.УНСФ_ПланПотребностейВМатериалах.Потребности КАК УНСФ_ПланПотребностейВМатериалахПотребности
	|ГДЕ
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Ссылка = &ДокументППМ
	|
	|СГРУППИРОВАТЬ ПО
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Номенклатура,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Характеристика,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.ЕдиницаИзмерения,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Склад,
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Период,
	// yala_N
	|	УНСФ_ПланПотребностейВМатериалахПотребности.Работа
	// yala_K
	|
	|ИНДЕКСИРОВАТЬ ПО
	// yala_N
	|	Работа,	
	// yala_K
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказПоставщикуЗапасы.Количество) КАК Количество
	|ПОМЕСТИТЬ втЗаказано
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	(ЗаказПоставщикуЗапасы.Номенклатура, ЗаказПоставщикуЗапасы.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВрТаб.Номенклатура КАК Номенклатура,
	|				ВрТаб.Характеристика КАК Характеристика
	|			ИЗ
	|				ВрТаб КАК ВрТаб)
	|	И ЗаказПоставщикуЗапасы.Ссылка.СЗПР_ПланПотребностейВМатериалах = &ДокументППМ
	|	И НЕ ЗаказПоставщикуЗапасы.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуЗапасы.Номенклатура,
	|	ЗаказПоставщикуЗапасы.Характеристика,
	|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТаб.Номенклатура КАК Номенклатура,
	|	ВрТаб.Характеристика КАК Характеристика,
	|	ВрТаб.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВрТаб.Количество КАК КоличествоВсего,
	|	ВрТаб.Склад КАК Склад,
	|	ВрТаб.ДатаПоступления КАК ДатаПоступления,
	|	ЕСТЬNULL(втЗаказано.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияЗаказано,
	|	ВрТаб.Количество - ЕСТЬNULL(втЗаказано.Количество, 0) КАК КоличествоОстаток,
	// yala_N
	|	ВрТаб.Работа КАК Работа
	// yala_K
	|ИЗ
	|	ВрТаб КАК ВрТаб
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказано КАК втЗаказано
	|		ПО ВрТаб.Номенклатура = втЗаказано.Номенклатура
	|			И ВрТаб.Характеристика = втЗаказано.Характеристика";
	
	
	// yala_N
	//Запасы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запасы.Очистить();
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МасРабот = Новый Массив; 
	МасОбщий = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрукВозв = Новый Структура;
		СтрукВозв.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура); СтрукВозв.Вставить("Характеристика", ВыборкаДетальныеЗаписи.Характеристика);
		СтрукВозв.Вставить("ЕдиницаИзмерения", ВыборкаДетальныеЗаписи.ЕдиницаИзмерения); СтрукВозв.Вставить("КоличествоВсего", ВыборкаДетальныеЗаписи.КоличествоВсего);
		СтрукВозв.Вставить("Склад", ВыборкаДетальныеЗаписи.Склад); СтрукВозв.Вставить("ДатаПоступления", ВыборкаДетальныеЗаписи.ДатаПоступления);
		СтрукВозв.Вставить("КоличествоОстаток", ВыборкаДетальныеЗаписи.КоличествоОстаток); СтрукВозв.Вставить("ЕдиницаИзмеренияЗаказано", ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияЗаказано);
		СтрукВозв.Вставить("Работа", ВыборкаДетальныеЗаписи.Работа);
		МасОбщий.Добавить(СтрукВозв);
		Если МасРабот.Найти(ВыборкаДетальныеЗаписи.Работа) = Неопределено Тогда
			МасРабот.Добавить(ВыборкаДетальныеЗаписи.Работа);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Значение из МасРабот Цикл
		НС = Запасы.Добавить();
		НС.Отбор = Ложь;
		НС.Номенклатура = Значение;
		Для Каждого ЗначениеЗ из МасОбщий Цикл
			Если ЗначениеЗ.Работа = Значение Тогда
				НС = Запасы.Добавить();
				НС.Отбор = Истина; НС.Номенклатура = ЗначениеЗ.Номенклатура;
				НС.Характеристика = ЗначениеЗ.Характеристика; НС.ЕдиницаИзмерения = ЗначениеЗ.ЕдиницаИзмерения; 
				НС.ДатаПоступления = ЗначениеЗ.ДатаПоступления; НС.Склад = ЗначениеЗ.Склад;
				НС.КоличествоВсего = ЗначениеЗ.КоличествоВсего; НС.КоличествоОстаток = ЗначениеЗ.КоличествоОстаток;
				
						
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// yala_K

КонецПроцедуры

&НаСервере
Процедура КомандаСоздатьЗаказыНаСервере() 	
	
	ЗаказПокупателя = ПланПотребностейВМатериалах.ДокументУтверждения.КопияСценария.ЗаказПокупателя;   	
	
	ТабЗапасов = Запасы.Выгрузить();
	ТЗ = ТабЗапасов.Скопировать(Новый Структура("Отбор",Истина));
	ТЗ.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,ДатаПоступления,Склад","КоличествоКЗаказу, КоличествоВсего, КоличествоОстаток");
	
	ТабЗаказов = ТЗ.Скопировать();   	
	
	СтруктураОтбора = Новый Структура("Склад");
	
	Если ГруппировкаЗаказов = 0 Тогда
		
		ТабЗаказов.Свернуть("Склад,ДатаПоступления");
		
		СтруктураОтбора.Вставить("ДатаПоступления");
		
	Иначе
		ТабЗаказов.Свернуть("Склад");			
	КонецЕсли;	
	
	Для Каждого СтрокаЗаказов Из ТабЗаказов Цикл
		
		НовыйДок = Документы.ЗаказПоставщику.СоздатьДокумент();
		НовыйДок.Организация = ПланПотребностейВМатериалах.Организация;
		НовыйДок.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
		НовыйДок.СЗПР_ПланПотребностейВМатериалах = ПланПотребностейВМатериалах;
		НовыйДок.Автор = Пользователи.ТекущийПользователь();
		
		НовыйДок.Дата = ТекущаяДатаСеанса();
		
		Если ГруппировкаЗаказов = 0 Тогда
			НовыйДок.ДатаПоступления = СтрокаЗаказов.ДатаПоступления;
		КонецЕсли;
		
		НовыйДок.ЗаказПокупателя = ЗаказПокупателя;
		НовыйДок.ПоложениеДатыПоступления = ?(ГруппировкаЗаказов = 0,Перечисления.ПоложениеРеквизитаНаФорме.ВШапке,Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрокаЗаказов);
		
		// bit_yala_N
		НовыйДок.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Не определен");
		Если НовыйДок.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			НовыйДок.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("НЕ ОПРЕДЕЛН");	
		КонецЕсли;
		НовыйДок.Договор = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("БЕЗ ДОГОВОРА");
		Если НовыйДок.Договор <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			НовыйДок.ВидЦенКонтрагента = НовыйДок.Договор.ВидЦенКонтрагента; 
			Если ЗначениеЗаполнено(НовыйДок.Договор.ВидЦенКонтрагента) Тогда
				НовыйДок.НДСВключатьВСтоимость = НовыйДок.Договор.ВидЦенКонтрагента.ЦенаВключаетНДС;
			КонецЕсли;
			НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		НовыйДок.СуммаВключаетНДС = Истина;
		НовыйДок.Организация = ЗаказПокупателя.Организация;
		НовыйДок.Ответственный = Справочники.Сотрудники.НайтиПоНаименованию("Комаренко Инна Сергеевна", Истина); 
		НовыйДок.ОД_ИзППМ = Истина;
		// bit_yala_K
		
		Строки = ТЗ.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайденнаяСтрока Из Строки Цикл
			
			//Нстр = НовыйДок.Запасы.Добавить();
			//
			//ЗаполнитьЗначенияСвойств(Нстр,НайденнаяСтрока);
			//Нстр.Количество = НайденнаяСтрока.КоличествоКЗаказу;
			//
			//Нстр.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Нстр.Номенклатура.ВидСтавкиНДС,ТекущаяДатаСеанса()); 
			//
			//// bit_yala_N
			//Нстр.Цена = ПолучитьЦенуНоменклатуры(Нстр.Номенклатура);
			//Если Нстр.Цена <> 0 Тогда
			//	Нстр.Сумма = Нстр.Цена * Нстр.Количество;
			//	Нстр.СуммаНДС = Нстр.Сумма / 120 * 20;
			//	Нстр.Всего = Нстр.Сумма;
			//КонецЕсли;
			//// bit_yala_K
			//
			//СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Нстр.СтавкаНДС);		
			//
			//Нстр.ЗаказПокупателя = ЗаказПокупателя;
			
			Если НайденнаяСтрока.КоличествоКЗаказу <> 0 Тогда
				Нстр = НовыйДок.Запасы.Добавить();
			
				ЗаполнитьЗначенияСвойств(Нстр,НайденнаяСтрока);
				Нстр.Количество = НайденнаяСтрока.КоличествоКЗаказу;
				
				Нстр.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Нстр.Номенклатура.ВидСтавкиНДС,ТекущаяДатаСеанса()); 
				
				// bit_yala_N
				Нстр.Цена = ПолучитьЦенуНоменклатуры(Нстр.Номенклатура);
				Если Нстр.Цена <> 0 Тогда
					Нстр.Сумма = Нстр.Цена * Нстр.Количество;
					Нстр.СуммаНДС = Нстр.Сумма / 120 * 20;
					Нстр.Всего = Нстр.Сумма;
				КонецЕсли;
				
				Нстр.ОД_ВсегоВППМ = НайденнаяСтрока.КоличествоВсего;
				Нстр.ОД_УжеЗаказано = НайденнаяСтрока.КоличествоВсего - НайденнаяСтрока.КоличествоОстаток +
					НайденнаяСтрока.КоличествоКЗаказу;	
				Нстр.ОД_Остаток = НайденнаяСтрока.КоличествоОстаток - НайденнаяСтрока.КоличествоКЗаказу;
				// bit_yala_K
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Нстр.СтавкаНДС);		
				
				Нстр.ЗаказПокупателя = ЗаказПокупателя;	
			КонецЕсли;
			
		КонецЦикла;
			
		НовыйДок.СостояниеЗаказа = Справочники.СостоянияЗаказовПоставщикам.НайтиПоНаименованию("В ОБРАБОТКУ");		
		
		НовыйДок.Записать(РежимЗаписиДокумента.Запись);
		
		НовСтр = СформированныеДокументы.Добавить(НовыйДок.Ссылка);
		
	КонецЦикла;
	
	Список.Отбор.Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,"Ссылка",СформированныеДокументы,ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элементы.СтраницаСформированныеДокументы.Видимость = СформированныеДокументы.Количество();
	
	Элементы.ГруппаСтраниц.ОтображениеСтраниц =  ?(СформированныеДокументы.Количество(),ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);

	ЗаполнитьНаСервере();
	
КонецПроцедуры   

&НаКлиенте
Процедура КомандаСоздатьЗаказы(Команда)
	
	КомандаСоздатьЗаказыНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ГруппировкаЗаказов = 1;
	
	Если Параметры.Свойство("ПланПотребностейВМатериалах") Тогда
		
		ПланПотребностейВМатериалах = Параметры.ПланПотребностейВМатериалах;
		
		ЗаполнитьНаСервере();
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,"Ссылка",СформированныеДокументы,ВидСравненияКомпоновкиДанных.ВСписке);
	Элементы.СтраницаСформированныеДокументы.Видимость = СформированныеДокументы.Количество();	
	Элементы.ГруппаСтраниц.ОтображениеСтраниц =  ?(СформированныеДокументы.Количество(),ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);
	
	//Элементы.ОД_СкопироватьДату.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.C, Ложь, Истина, Ложь);
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаВыбратьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ЗАпасы Цикл
		СтрокаТЧ.Отбор = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ЗАпасы Цикл
		СтрокаТЧ.Отбор = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьЗаказыПоДатамПоступленияПриИзменении(Элемент)
	
	ГруппировкаЗаказов = НЕ ФормироватьЗаказыПоДатамПоступления;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПроверитьПланПотребностей(ПланПотребностейВМатериалах) Тогда 		
		
		ПоказатьПредупреждение(,НСтр("ru='Заполнять заказы можно только из проведенного документа со статусом ""Утвержден""'"));
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПланПотребностей(ПланПотребностейВМатериалах)
	
	Возврат ПланПотребностейВМатериалах.Проведен И ПланПотребностейВМатериалах.Статус = ПредопределенноеЗначение("Перечисление.УНСФ_СтатусыПланов.Утвержден");
	
КонецФункции

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗапасыНоменклатура" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоКЗаказуПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.КоличествоКЗаказу > ТекущаяСтрока.КоличествоОстаток Тогда
		ТекущаяСтрока.КоличествоКЗаказу = ТекущаяСтрока.КоличествоОстаток;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Количество к заказу не может превышать количество остатка для заказа! Заполнено максимальное количество";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ДополненияОтРасширенияОсновныеДоработки

&НаКлиенте
Процедура ОД_СкопироватьДату(Команда)
	Если Элементы.Запасы.ТекущиеДанные <> Неопределено Тогда
		ОД_КопируемаяДата = Элементы.Запасы.ТекущиеДанные.ДатаПоступления; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОД_ВставитьДату(Команда)
	Если Элементы.Запасы.ТекущиеДанные <> Неопределено Тогда 
		Для Каждого Значение из Элементы.Запасы.ВыделенныеСтроки Цикл
			Запасы[Значение].ДатаПоступления = ОД_КопируемаяДата;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуНоменклатуры(Ном)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, Номенклатура = &Ном) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен = &УчетнаяЦена";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Ном", Ном);
	Запрос.УстановитьПараметр("УчетнаяЦена", Справочники.ВидыЦен.НайтиПоНаименованию("Учетная цена"));
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Цена;	
	Иначе
		Возврат 0;		
	КонецЕсли;
	
КонецФункции

#КонецОбласти